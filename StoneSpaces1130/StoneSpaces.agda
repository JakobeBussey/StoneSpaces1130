module StoneSpaces where

open import BasicTypes
open import Poset
open import Lattice
open import Boolean
-- open import Heyting

-- Write \_ for subscript, \^ for superscript
PO-Eq : โ {A : Set} {_โคโ_ _โคโ_ : A โ A โ Set}
           โ _โคโ_ โ _โคโ_ โ PO _โคโ_ โ PO _โคโ_
PO-Eq {A} {_โคโ_} {_โคโ_} (h12 , h21) po =
  record { โค-refl = h12 โค-refl;
           โค-tran = ฮป ab bc โ h12 (โค-tran (h21 ab) (h21 bc)) ;
           โค-asymm = ฮป ab ba โ โค-asymm (h21 ab) (h21 ba) }
      where open PO po

PO-EqIff : โ {A : Set} {_โคโ_ _โคโ_ : A โ A โ Set}
              โ _โคโ_ โ _โคโ_ โ PO _โคโ_ โ PO _โคโ_
PO-EqIff {A} {R} {Q} (RQ , QR) = (ฮป po โ PO-Eq {A} {R} {Q} (RQ , QR) po)
                                  , (ฮป po โ PO-Eq {A} {Q} {R} (QR , RQ) po)
-- \simeq
-- _โ_ : โ {A : Set} โ Rel A โ Rel A โ Set
-- R โ Q = (โ {x} {y} โ R x y โ Q x y) ร (โ {x} {y} โ Q x y โ R x y)

MSL-Eq : โ {A : Set} (_โค_ : A โ A โ Set) (po1 po2 : PO _โค_)
         โ MSL po1 โ MSL po2
MSL-Eq {A} _โค_ po1 po2 record { _โง_ = _โง_ ; โง-meet = โง-meet ; I = I ; I-meet = I-meet }
                     = record { _โง_ = _โง_ ; โง-meet = โง-meet ; I = I ; I-meet = I-meet }

MSL-Eq2 : โ {A : Set} (_โคโ_ _โคโ_ : A โ A โ Set) โ (po1 : PO _โคโ_) โ (po2 : PO _โคโ_)
          โ _โคโ_ โ _โคโ_ โ MSL po1 โ MSL po2
MSL-Eq2 {A} _โคโ_ _โคโ_ po1 po2 (e12 , e21)
        (record { _โง_ = _โง_ ; โง-meet = โง-meet ; I = I ; I-meet = I-meet } )
         = record { _โง_ = _โง_ ;
              โง-meet = ฮป {x} {y} โ
                (ฮป {s} p โ e12 (p1 โง-meet p ) )
              , ฮป {c} h โ e12 (p2 โง-meet ฮป p โ e21 (h p) ) ;
                   I = I ;
              I-meet = (exFalso)
                     , (ฮป {c} h โ e12 (p2 I-meet exFalso ) ) }

-- From MSL we can get a JSL in the opposite ordering
msl2jsl : โ {A : Set} {_โค_ : A โ A โ Set} {po : PO _โค_}
            โ MSL po โ JSL (PO.po' po)
msl2jsl {A} {_โค_} {po} msl =
      record { _โจ_ = _โง_ ;
               โจ-join = (ฮป a โ case a
                                 (ฮป sequx โ leftti sequx)
                                 (ฮป seqy โ decry seqy))
                       , ฮป c โ p2 โง-meet c;
               O = I ;
               O-join = I-meet }
      where open MSL msl

-- Hey! Try to prove JSL to MSL
jsl2msl' : โ {A : Set} {_โค_ : A โ A โ Set} {po : PO _โค_}
            โ JSL po โ MSL (PO.po' po)
jsl2msl' {A} {_โค_} {po} jsl =
  record { _โง_ = _โจ_ ;
        โง-meet = (ฮป a โ case a (PO.equle po ub1) (PO.equle po ub2)) , p2 โจ-join;
             I = O ;
        I-meet = O-join }
    where open JSL jsl

jsl2msl : โ {A : Set} {_โค_ : A โ A โ Set} {po : PO _โค_} (jsl : JSL po)
            โ โ (po' : PO (PO._โฅ_ po)) โ MSL po'
jsl2msl {A} {_โค_} {po} jsl po' =
  let msl = jsl2msl' jsl
  in MSL-Eq (PO._โฅ_ po) (PO.po' po) po' msl

record ICMon (A : Set) : Set where
  infixr 25 _โ_   -- โ is \o.
  field
    _โ_ : A โ A โ A
    e : A
    idem : โ {a : A} โ a โ a โก a
    comm : โ {a b : A} โ a โ b โก b โ a
    assoc : โ {a b c : A} โ (a โ b) โ c โก a โ (b โ c)
    unit : โ {a : A} โ a โ e โก a

  -- Congruence laws: valid in any monoid
  cong : โ {a b a' b' : A} โ a โก a' โ b โก b' โ (a โ b) โก (a' โ b')
  cong refl refl = refl
  congL : โ {a a' b : A} โ a โก a' โ (a โ b) โก (a' โ b)
  congL aeqap = cong aeqap refl
  congR : โ {a b b' : A} โ b โก b' โ (a โ b) โก (a โ b')
  congR = cong refl

  -- the partial order induced by the monoid
  le : A โ A โ Set
  le a b = a โ b โก b

  lePO : PO le
  PO.โค-refl lePO = idem
  PO.โค-asymm lePO {a} {b} aorbeqb boraeqa =
    tran (a โ b) (tran (b โ a) (symm boraeqa) comm) aorbeqb
  PO.โค-tran lePO {a} {b} {c} aorbeqb borceqc =
    tran (b โ c)
         (tran (a โ (b โ c))
               (congR (symm borceqc))
               (tran ((a โ b) โ c)
                       (symm assoc)
                       (congL aorbeqb)))
         borceqc

  -- with the following line, we let _โค_ be le
  -- and import all definitions from the PO record.
  open PO lePO

  -- all order-related concepts, including โ, are now in reference to _โค_ as le
  โ-join : โ {a b : A} โ โ (pairSet a b) (a โ b)
  โ-join {a} {b} = (ub , lub) where
    ub : UpperBound (pairSet a b) (a โ b)
    ub (in1 refl) = tran ((a โ a) โ b) (symm assoc) (congL idem)
    ub (in2 refl) = tran ((a โ b) โ b) comm (tran (a โ (b โ b)) assoc (congR idem))
    lub : โ {c : A} โ UpperBound (pairSet a b) c โ le (a โ b) c
    lub {c} h = tran (a โ (b โ c)) assoc
                     (tran ((a โ c)) (congR (h (in2 refl))) (h (in1 refl)))

  e-join : โ empty e
  e-join = (ฮป x โ exFalso x) ,
           (ฮป x โ tran _ comm unit)

  -- From monoid to JSL
  jsl : JSL lePO
  jsl  = record { _โจ_ = _โ_ ;
               โจ-join = โ-join;
                    O = e ;
               O-join = e-join}

  -- HEY! Also Try to get MSL from monoid!
  -- msl : MSL
  -- msl = {!   !}

record ALAT (A : Set) : Set where
  field
    join : ICMon A
    meet : ICMon A

  open ICMon join renaming (_โ_ to _โจ_; e to O;
    idem to โจ-idem; comm to โจ-comm; assoc to โจ-assoc; unit to โจ-unit;
    le to _โค_; lePO to poโค; congR to โจ-congR; jsl to jsl1 )
  open ICMon meet renaming (_โ_ to _โง_; e to I;
    idem to โง-idem; comm to โง-comm; assoc to โง-assoc; unit to โง-unit;
    le to _โผ_; lePO to poโผ; congL to โง-congL; jsl to jsl2 )

  field
    absorp1 : โ {a b : A} โ a โง (a โจ b) โก a
    absorp2 : โ {a b : A} โ a โจ (a โง b) โก a

  order-opposites : โ {x y : A} โ y โผ x โ x โค y
  order-opposites {x} {y} =
    (ฮป ygex โ tran (y โจ x) โจ-comm (tran (y โจ y โง x) ((โจ-congR (symm ygex))) absorp2)) ,
    (ฮป xley โ tran ((x โจ y) โง x) (โง-congL (symm xley) )
            (tran (x โง x โจ y) โง-comm absorp1) )

  open PO poโค

  _โฝ_ : A โ A โ Set
  _โฝ_ x y = y โผ x

  poโฝ : PO _โฝ_
  poโฝ = PO.po' poโผ

  oopp : _โฝ_ โ _โค_
  oopp = ((ฮป {x} {y} โ p1 order-opposites ) , ฮป {x} {y} โ p2 order-opposites)

  mslโฝ : MSL poโฝ
  mslโฝ = jsl2msl' {A} {_โผ_} {poโผ} jsl2

  lat : LAT poโค
  LAT.jsl lat = jsl1
  LAT.msl lat = MSL-Eq2 _โฝ_ _โค_ poโฝ poโค oopp mslโฝ

module LATtoALAT {A : Set} {_โค_ : A โ A โ Set} {po : PO _โค_} (lat : LAT po) where

  open PO po
  open JSL (LAT.jsl lat)
  open MSL (LAT.msl lat)

  open LAT lat using (ab1; ab2)

  cong : โ {a b a' b' : A} โ a โก a' โ b โก b' โ (a โจ b) โก (a' โจ b')
  cong refl refl = refl

  pseu : โ {a b : A} โ a โง (a โจ b) โก (a โง a) โจ (a โง b)
  pseu {a} {b} =
    tran a ab1 (tran (a โจ (a โง b))
                     (symm ab2)
                     (cong (symm (โค-asymm lb1 (glb โค-refl โค-refl))) refl))

  alat : ALAT A
  ALAT.join alat = record
    { _โ_ = _โจ_ ;
        e = O ;
     idem = โจ-idem ;
     comm = โจ-comm ;
    assoc = โจ-assoc ;
     unit = โจ-unit }
  ALAT.meet alat = record
    { _โ_ = _โง_ ;
        e = I ;
     idem = โง-idem ;
     comm = โง-comm ;
    assoc = โง-assoc ;
     unit = โง-unit }
  ALAT.absorp1 alat = ab1
  ALAT.absorp2 alat = ab2
  --
  -- record HA : Set where
  --   infix 16 _โช_
  --   infix 16 _โฉ_
  --   field
  --     _โช_ : A โ A โ A
  --     _โฉ_ : A โ A โ A
  --     ๐_ : A โ A
  --     O : A
  --     I : A
  --
  --     disa : โ {a b c : A} โ ((a โช b) โฉ c) โก (a โฉ c) โช (b โฉ c)
  --     disb : โ {a b c : A} โ ((a โฉ b) โช c) โก (a โช c) โฉ (b โช c)
  --     O-min : โ {a : A} โ a โช O โก a
  --     I-max : โ {a : A} โ a โฉ I โก a
  --     โช-idem : โ {a : A} โ a โช a โก a
